-- Before) Create Warehouses: 
CREATE OR REPLACE WAREHOUSE ANALYST_WH with
warehouse_size='SMALL'
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE AUDIENCE_WH with
warehouse_size='SMALL'
min_cluster_count=1
max_cluster_count=6
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE DASHBOARD_WH with
warehouse_size='MEDIUM'
min_cluster_count=1
max_cluster_count=1
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE DATALOADER with
warehouse_size='LARGE'
min_cluster_count=1
max_cluster_count=2
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE DATALOADER_2 with
warehouse_size='LARGE'
min_cluster_count=1
max_cluster_count=2
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE ENRICHMENT_WH with
warehouse_size='SMALL'
min_cluster_count=1
max_cluster_count=3
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE KEYWORD_WH with
warehouse_size='SMALL'
min_cluster_count=1
max_cluster_count=3
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE LORENZO_TEST with
warehouse_size='XSMALL'
min_cluster_count=1
max_cluster_count=1
auto_suspend = 60
auto_resume = true
initially_suspended=true;

CREATE OR REPLACE WAREHOUSE PIXEL_WH with
warehouse_size='XSMALL'
min_cluster_count=1
max_cluster_count=5
auto_suspend = 60
auto_resume = true
initially_suspended=true;



-- 0) Create Databases and Schemas:
CREATE DATABASE AUDIENCELAB_INTERNAL_PROD;
CREATE SCHEMA AUDIENCELAB_INTERNAL_PROD.RAW_DATA;


CREATE TRANSIENT DATABASE FOUR_EYES;
ALTER DATABASE FOUR_EYES
SET DATA_RETENTION_TIME_IN_DAYS=0;


CREATE TRANSIENT DATABASE STATISTICS;
ALTER DATABASE STATISTICS
SET DATA_RETENTION_TIME_IN_DAYS=0;


CREATE TRANSIENT DATABASE TROVO
ALTER DATABASE TROVO
SET DATA_RETENTION_TIME_IN_DAYS=0;
CREATE TRANSIENT SCHEMA TROVO.RAW_DATA;
ALTER SCHEMA TROVO.RAW_DATA
SET DATA_RETENTION_TIME_IN_DAYS=0;
CREATE TRANSIENT SCHEMA TROVO.TEST;
ALTER SCHEMA TROVO.TEST
SET DATA_RETENTION_TIME_IN_DAYS=0;


-- 0.5) Create Backup Stage:

CREATE OR REPLACE STAGE FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE
    url='s3://audiencelab-4eyes/audiencelab_backup/'
    STORAGE_INTEGRATION=FOUR_EYES_INTEGRATION
    FILE_FORMAT=(
        FORMAT_NAME='FOUR_EYES.PUBLIC.FOUR_EYES_CSV_FORMAT'
    );


-- 0.6) Create USERS:

USE ROLE SYSADMIN;

CREATE OR REPLACE USER AUDIENCEUSER;

CREATE OR REPLACE USER ENRICHMENTUSER;

CREATE OR REPLACE USER KEYWORDUSER;

CREATE OR REPLACE USER STAGINGPIXEL;

CREATE OR REPLACE USER LORENZO;

CREATE OR REPLACE USER YAPHOA001;

CREATE OR REPLACE USER ARTHUR;

-- 0.7) Create ROLES with access to objects:

CREATE OR REPLACE ROLE PIXEL_AGENT;

CREATE OR REPLACE ROLE STATISTICS_USER;

-- 0.8) Grant PRIVILEGES TO ROLES:



-- PIXEL_AGENT:
GRANT USAGE ON DATABASE AUDIENCELAB_INTERNAL_PROD TO ROLE PIXEL_AGENT;
GRANT USAGE ON DATABASE TROVO TO ROLE PIXEL_AGENT;
GRANT USAGE ON DATABASE FOUR_EYES TO ROLE PIXEL_AGENT;

GRANT USAGE ON SCHEMA AUDIENCELAB_INTERNAL_PROD.PUBLIC TO ROLE PIXEL_AGENT;
GRANT USAGE ON SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT USAGE ON SCHEMA FOUR_EYES.PUBLIC TO ROLE PIXEL_AGENT;

GRANT USAGE ON ALL TABLES IN SCHEMA AUDIENCELAB_INTERNAL_PROD.PUBLIC TO ROLE PIXEL_AGENT;
GRANT USAGE ON ALL TABLES IN SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT USAGE ON ALL TABLES IN SCHEMA FOUR_EYES.PUBLIC TO ROLE PIXEL_AGENT;

GRANT SELECT ON ALL TABLES IN SCHEMA AUDIENCELAB_INTERNAL_PROD.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON ALL TABLES IN SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON ALL TABLES IN SCHEMA FOUR_EYES.PUBLIC TO ROLE PIXEL_AGENT;

GRANT SELECT ON FUTURE TABLES IN SCHEMA AUDIENCELAB_INTERNAL_PROD.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON FUTURE TABLES IN SCHEMA TROVO.PUBLIC TO ROLE PIXEL_AGENT;
GRANT SELECT ON FUTURE TABLES IN SCHEMA FOUR_EYES.PUBLIC TO ROLE PIXEL_AGENT;

-- STATISTICS USER:
GRANT USAGE ON DATABASE STATISTICS TO ROLE STATISTICS_USER;

GRANT USAGE ON SCHEMA STATISTICS.PUBLIC TO ROLE STATISTICS_USER;

GRANT USAGE ON ALL TABLES IN SCHEMA STATISTICS.PUBLIC TO ROLE STATISTICS_USER;

GRANT SELECT ON ALL TABLES IN SCHEMA STATISTICS.PUBLIC TO ROLE STATISTICS_USER;

GRANT SELECT ON FUTURE TABLES IN SCHEMA STATISTICS.PUBLIC TO ROLE STATISTICS_USER;



-- 0.9) Assign ROLES to USERS:

GRANT PIXEL_AGENT ROLE TO USER STAGINGPIXEL;

GRANT STATISTICS_USER ROLE TO USER STATISTICS_USER;




-- 1) Create Backups of Snowflake data in S3:


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.UNIVERSAL_PERSON:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/universal_person
FROM (
    SELECT * FROM AUDIENCELAB_INTERNAL_PROD.PUBLIC.UNIVERSAL_PERSON
      );


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.CONSUMER_B2C_FULL:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/consumer_b2c_full
FROM (
    SELECT * FROM AUDIENCELAB_INTERNAL_PROD.PUBLIC.CONSUMER_B2C_FULL
      );


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.B2B_EXPORT_TROVO:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/b2b_export_trovo
FROM (
    SELECT * FROM AUDIENCELAB_INTERNAL_PROD.PUBLIC.B2B_EXPORT_TROVO
      );


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.KEYWORD_PLANNER:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/keyword_planner
FROM (
    SELECT * FROM AUDIENCELAB_INTERNAL_PROD.PUBLIC.KEYWORD_PLANNER
      );


-- AUDIENCELAB.PUBLIC.PREMADE_TAXONOMY:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/premade_taxonomy
FROM (
    SELECT * FROM AUDIENCELAB_INTERNAL_PROD.PUBLIC.PREMADE_TAXONOMY
      );




-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.TROVO_FEED_RESOLVED (External Table, needs @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE stage with this URL: s3://trovo-coop-adslab/outgoing/cookie_sync/resolved/):
CREATE OR REPLACE EXTERNAL TABLE 
AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_FEED_RESOLVED 
(
TROVO_ID VARCHAR(16777216) AS (CAST(GET(VALUE, 'TROVO_ID') AS VARCHAR(16777216))), 
PARTNER_ID VARCHAR(16777216) AS (CAST(GET(VALUE, 'PARTNER_ID') AS VARCHAR(16777216))),
PARTNER_UID VARCHAR(16777216) AS (CAST(GET(VALUE, 'PARTNER_UID') AS VARCHAR(16777216))), 
SHA256_LOWER_CASE VARCHAR(16777216) AS (CAST(GET(VALUE, 'SHA256_LOWER_CASE') AS VARCHAR(16777216))), 
IP VARCHAR(16777216) AS (CAST(GET(VALUE, 'IP') AS VARCHAR(16777216))), 
JSON_HEADERS VARCHAR(16777216) AS (CAST(GET(VALUE, 'JSON_HEADERS') AS VARCHAR(16777216))), 
EVENT_DATE TIMESTAMP_NTZ(9) AS (CAST(GET(VALUE, 'EVENT_DATE') AS TIMESTAMP_NTZ(9))), 
INGESTION_TIMESTAMP TIMESTAMP_NTZ(9) AS (CAST(CONCAT(SUBSTR(METADATA$FILENAME, 33, 4), '-', SUBSTR(METADATA$FILENAME, 40, 2), '-', SUBSTR(METADATA$FILENAME, 45, 2), ' ', SUBSTR(METADATA$FILENAME, 50, 2), ':', SUBSTR(METADATA$FILENAME, 55, 2), ':0', SUBSTR(METADATA$FILENAME, 58, 1)) AS TIMESTAMP_NTZ(9))))
LOCATION=@TROVO_ADSLAB_STAGE/cookie_sync/resolved/ 
pattern='.*.parquet' 
file_format=(TYPE=PARQUET NULL_IF=()) ;


-- FOUR_EYES.PUBLIC.PREMADE_4EYES_LITE:
COPY INTO @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/premade_4eyes_lite
FROM (
    SELECT * FROM FOUR_EYES.PUBLIC.PREMADE_4EYES_LITE
      );







-- 1.5) Create STORAGE INTEGRATION objects and Stages, in the new account, for the "TROVO_ADSLAB_STAGE" and "AUDIENCELAB_BACKUP_STAGE"




-- 2) Create Snowflake Tables, in the new account, using the data that was copied into S3:



-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.UNIVERSAL_PERSON:
    CREATE OR REPLACE AUDIENCELAB_INTERNAL_PROD.PUBLIC.UNIVERSAL_PERSON
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/universal_person;


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.CONSUMER_B2C_FULL:
    CREATE OR REPLACE AUDIENCELAB_INTERNAL_PROD.PUBLIC.CONSUMER_B2C_FULL
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/consumer_b2c_full;


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.B2B_EXPORT_TROVO:
    CREATE OR REPLACE AUDIENCELAB_INTERNAL_PROD.PUBLIC.B2B_EXPORT_TROVO
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/b2b_export_trovo;


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.KEYWORD_PLANNER:
    CREATE OR REPLACE AUDIENCELAB_INTERNAL_PROD.PUBLIC.KEYWORD_PLANNER
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/keyword_planner;


-- AUDIENCELAB.PUBLIC.PREMADE_TAXONOMY:
    CREATE OR REPLACE AUDIENCELAB_INTERNAL_PROD.PUBLIC.PREMADE_TAXONOMY
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/premade_taxonomy;


-- AUDIENCELAB_INTERNAL_PROD.PUBLIC.TROVO_FEED_RESOLVED (External Table, needs @AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_ADSLAB_STAGE stage with this URL: s3://trovo-coop-adslab/outgoing/cookie_sync/resolved/):
    CREATE OR REPLACE EXTERNAL TABLE AUDIENCELAB_INTERNAL_PROD.RAW_DATA.TROVO_FEED_RESOLVED 
    (
    TROVO_ID VARCHAR(16777216) AS (CAST(GET(VALUE, 'TROVO_ID') AS VARCHAR(16777216))), 
    PARTNER_ID VARCHAR(16777216) AS (CAST(GET(VALUE, 'PARTNER_ID') AS VARCHAR(16777216))),
    PARTNER_UID VARCHAR(16777216) AS (CAST(GET(VALUE, 'PARTNER_UID') AS VARCHAR(16777216))), 
    SHA256_LOWER_CASE VARCHAR(16777216) AS (CAST(GET(VALUE, 'SHA256_LOWER_CASE') AS VARCHAR(16777216))), 
    IP VARCHAR(16777216) AS (CAST(GET(VALUE, 'IP') AS VARCHAR(16777216))), 
    JSON_HEADERS VARCHAR(16777216) AS (CAST(GET(VALUE, 'JSON_HEADERS') AS VARCHAR(16777216))), 
    EVENT_DATE TIMESTAMP_NTZ(9) AS (CAST(GET(VALUE, 'EVENT_DATE') AS TIMESTAMP_NTZ(9))), 
    INGESTION_TIMESTAMP TIMESTAMP_NTZ(9) AS (CAST(CONCAT(SUBSTR(METADATA$FILENAME, 33, 4), '-', SUBSTR(METADATA$FILENAME, 40, 2), '-', SUBSTR(METADATA$FILENAME, 45, 2), ' ', SUBSTR(METADATA$FILENAME, 50, 2), ':', SUBSTR(METADATA$FILENAME, 55, 2), ':0', SUBSTR(METADATA$FILENAME, 58, 1)) AS TIMESTAMP_NTZ(9))))
    LOCATION=@TROVO_ADSLAB_STAGE/cookie_sync/resolved/ 
    pattern='.*.parquet' 
    file_format=(TYPE=PARQUET NULL_IF=()) ;


-- FOUR_EYES.PUBLIC.PREMADE_4EYES_LITE:
    CREATE OR REPLACE FOUR_EYES.PUBLIC.PREMADE_4EYES_LITE
    AS 
    SELECT 
    ...
    FROM @FOUR_EYES.PUBLIC.AUDIENCELAB_BACKUP_STAGE/premade_4eyes_lite








-- 3) Set up the PIPES that were used with the previous account:






-- 3.5) Set up the STREAMS that were used with the previous account:






-- 4) Set up the TASKS that were used with the previous account:







-- Raw_topics task:
CREATE OR REPLACE TASK FOUR_EYES.PUBLIC.RAW_TOPICS_TASK
    WAREHOUSE='DATALOADER'
    -- SCHEDULE='USING CRON 0 17 * * * America/Chicago'
    SCHEDULE='360 MINUTES'
    USER_TASK_TIMEOUT_MS=36000000
WHEN 
    SYSTEM$STREAM_HAS_DATA('FOUR_EYES.PUBLIC.RAW_TOPICS_STREAM')
    AS 
            BEGIN
-- Perform the join operation and insert into target table
            INSERT INTO FOUR_EYES.PUBLIC.PREMADE_4EYES_LITE ("DATE", "SEGMENT", "UP_ID")
            SELECT
                RT.DATE AS "DATE",
                RT.TOPIC AS "SEGMENT",
                F.value::string AS up_id
            FROM
                "FOUR_EYES"."PUBLIC"."RAW_TOPICS_STREAM" AS RT
            INNER JOIN
                "FOUR_EYES"."PUBLIC"."SHA_TO_UPS" AS SHA_TO_UPS
                ON SHA_TO_UPS."SHA256_LC_HEM" = RT."SHA256_LC_HEM"
            CROSS JOIN
                LATERAL FLATTEN(input => SHA_TO_UPS.UP_IDS) F;
END;